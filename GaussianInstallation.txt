# Gaussian Splatting Nerfstudio Installation Guide

Before starting the installation of **Gaussian Splatting Nerfstudio**, ensure you have **Ubuntu 24.04** installed. If you don't have any version of Ubuntu on your system, you can skip to section **B** to install **Ubuntu 24.04** and if you already have **Ubuntu 24.04** installed, skip ahead to **Section C** where the installation of **Gaussian Splatting Nerfstudio** begins.

---
## A. Uninstalling Older Versions of Ubuntu

If you have an older version of Ubuntu installed and need to upgrade to Ubuntu 24.04, you must first remove the existing installation. This section will guide you through the process of uninstalling Ubuntu safely before proceeding with the installation of the new version.

### Step 1: Access Disk Management in Windows

Before uninstalling Ubuntu, you need to access Windows and open Disk Management to locate the partitions used by Ubuntu.

1. Boot into Windows.
2. Open Disk Management by right-clicking the Windows icon and selecting **Disk Management**.

### Step 2: Delete Ubuntu Partitions

Once in Disk Management, locate the partitions used by Ubuntu and delete them.

1. Identify the partitions labeled as **Ext4**, **Linux Swap**, or **EFI System Partition** (if used by Ubuntu).
2. Right-click on each Ubuntu-related partition and select **Delete Volume**.
3. Confirm the deletion when prompted.

### Step 3: Extend Windows Partition

After deleting the Ubuntu partitions, the freed space needs to be allocated back to Windows.

1. Right-click on the main Windows partition (usually **C:**).
2. Select **Extend Volume**.
3. Follow the on-screen instructions to merge the unallocated space with the Windows partition.

### Step 4: Assign a Drive Letter to the EFI Partition

To ensure that the system is properly cleaned up, we need to assign a drive letter to the EFI partition using the Command Prompt.

1. Open **Command Prompt** as Administrator:
   - Search for **cmd** in the Windows search bar.
   - Select **Run as administrator**.
2. Type the following command to open the Disk Partitioning tool:
   ```sh
   diskpart
   ```
   This will enter the Disk Partition utility, and you should see a message indicating that `DISKPART` is running.
3. List the available disks:
   ```sh
   list disk
   ```
   This will display all the disks connected to the system. Identify the disk where Ubuntu was installed (usually **Disk 0**).
4. Select the appropriate disk:
   ```sh
   select disk 0
   ```
   If your Ubuntu installation was on a different disk, replace `0` with the correct disk number.
5. List the partitions on the selected disk:
   ```sh
   list partition
   ```
   This will display all partitions on the disk. Locate the **EFI System Partition**, usually **Partition 1**.
6. Select the EFI partition:
   ```sh
   select partition 1
   ```
   If the EFI partition is a different number, replace `1` with the correct partition number.
7. Assign a drive letter (e.g., `z:`) to the partition to make it accessible:
   ```sh
   assign letter=z
   ```
8. Exit `diskpart`:
   ```sh
   exit
   ```
   Now, the EFI partition should be accessible under **z:** in File Explorer.

### Step 5: Remove Ubuntu from EFI Partition

Now that the EFI partition is accessible, follow these steps to delete Ubuntu's boot entry:

1. In the Command Prompt, switch to the EFI partition:
   ```sh
   z:
   ```
2. Navigate to the EFI folder:
   ```sh
   cd EFI
   ```
3. List the contents of the EFI directory:
   ```sh
   dir
   ```
   You should see folders like `Boot`, `Microsoft`, and `Ubuntu`.
4. Remove the Ubuntu boot entry:
   ```sh
   rd /s Ubuntu
   ```
   When prompted, type `Y` and press **Enter** to confirm.
5. Verify the removal:
   ```sh
   dir
   ```
   The `Ubuntu` folder should no longer be listed.

At this point, Ubuntu has been completely removed from your system, and you can proceed with installing Ubuntu 24.04.

## B. Installing Ubuntu 24.04 LTS

If you don’t have Ubuntu installed on your system, follow these steps to install **Ubuntu 24.04 LTS**.

### Step 1: Download Ubuntu 24.04 LTS

Before installing Ubuntu, you need to download the latest **Ubuntu 24.04 LTS ISO** file from the official website.

1.  Open your web browser and go to the official Ubuntu website: [https://ubuntu.com/download/desktop](https://ubuntu.com/download/desktop).
2.  Click on **Download 24.04.2 LTS** to start the process.

### Step 2: Download and Install Rufus

To create a bootable USB drive, you will need **Rufus**, a tool designed for formatting and creating bootable USB drives.

1.  Go to the Rufus official website: [https://rufus.ie](https://rufus.ie).
2.  Scroll down to the **Download** section. 
3.  Download the **Standard** version for your system architecture (**x64** in most cases).
     
### Step 3: Create a Bootable USB

Now that you have both the Ubuntu ISO and Rufus installed, you can proceed with creating a bootable USB drive.

1.  Insert a USB drive (at least **8GB**) into your computer.
2.  Run the **Rufus** executable to open it.
3.  In the **Device** dropdown, select your USB drive.
4.  Click **Select** and choose the **Ubuntu 24.04.2 LTS ISO** file you downloaded.
5.  Set the **Partition scheme** to **MBR** and the **Target system** to **BIOS or UEFI**.
6.  Under **Format Options**, set the **File system** to **NTFS** and the **Cluster size** to **4096 bytes (Default)**.  
7.  Click **Start**, a prompt will appear asking for the write mode—select **Write in ISO Image mode (Recommended)** and click **OK**, then wait for Rufus to create the bootable USB.
8.  Once the process is complete, click **Close**.

### Step 4: Shrink the Disk for Ubuntu

Before installing Ubuntu, you need to allocate space on your hard drive by shrinking an existing partition.

1.  Open **Disk Management** by right-clicking the Windows icon and selecting **Disk Management**.
2.  Right-click the **OS (C:)** partition and select **Shrink Volume**.
3.  In the pop-up window, enter the amount of space to shrink. The recommended space is **400GB + 1.5× your RAM** (for 16GB RAM: **434,176MB**) and click **Shrink**,.
4.  You will see a new unallocated space in the disk.

### Step 5: Boot from the USB Drive

To start the Ubuntu installation, you need to boot from the USB drive.

1.  Restart your computer and enter the **BIOS/UEFI** by pressing the designated key for your system brand:
    -   **Dell**: `F2` or `F12`
    -   **HP**: `Esc` or `F10`
    -   **Lenovo**: `F1`, `F2`, or `Novo Button` (small button next to power)
    -   **ASUS**: `F2` or `Del`
2.  Once inside the BIOS/UEFI, locate the **Boot Options** or **Boot Configuration** section.
3.  Disable **Fast Boot** to allow USB booting and change the **Boot Order** to prioritize the USB drive..
4.  Save changes and exit the BIOS/UEFI. Your system will now boot from the USB drive.

### Step 6: Install Ubuntu

Now that your system has booted from the USB drive, follow these steps to install Ubuntu.

1.  On the welcome screen, select **Try or Install Ubuntu**.
2.  Choose your **language**, configure **Accessibility** settings if needed, and select your **Keyboard Layout**, then click **Next**.
3.  Choose your **Wi-Fi network**,  enter the password, and click **Next**.
4.  If an update prompt appears, select **Skip**.
5.  Click **Install Ubuntu**.
6.  Select **Interactive Installation**, then choose **Extended Selection**.
7.  Check the boxes for:
    -   **Install third-party software for graphics and Wi-Fi hardware**
    -   **Download and install support for additional media formats**
8.  Click **Manual Installation**.
9.  Locate the **Free Space** entry (this should match the amount of space you shrank earlier) and click **"+"**.
10.  Create a **swap partition**:
    -   Size: **1.5× RAM** (for 16GB RAM: **24GB / 24,576MB**) or **2.0× RAM** (for 16GB RAM: **32GB / 32,768MB**)
    -   Used as: **Swap area**
    -   Click **OK**.
11.  Select the remaining **Free Space**, click **"+"**, and configure:
    -   Used as: **Ext4 journaling file system**
    -   Mount point: **/** (root)
    -   Click **OK**.
12.  Click **Next**.    
13.  Enter your **name**, **computer name**, **username**, and **password**.    
14.  Leave **Use Active Directory** **unchecked** and click **Next**.
15.  Select your **time zone**, click **Next**.
16.  Click **Install Now** and wait for the process to complete.
 
### Step 6: Restart and Complete Installation

1.  Once the installation finishes, remove the USB drive.  
2.  Click **Restart Now**.    
3. After rebooting, the **boot menu** will appear with options for **Ubuntu** and **Windows Boot Manager**. 
5. Select **Ubuntu** to log in and complete any additional setup.

## **C. Gaussian Splatting Nerfstudio Installation**

In this section, we will **guide you step by step** to install **Nerfstudio** with **Gaussian Splatting** on **Ubuntu 24.04**. This process includes installing all necessary dependencies, setting up your environment, and ensuring your system meets the requirements for running **Gaussian Splatting** efficiently.

By the end of this section, you will have a **fully functional setup** capable of performing Gaussian Splatting for **NeRF reconstruction** and rendering.

### **Step 1: Check NVIDIA Drivers**

Before proceeding, verify if NVIDIA drivers are installed and correctly configured on your system. Open a terminal and run the following commands:

   ```bash
   nvidia-settings --version
cat /proc/driver/nvidia/version
   ```
-   If these commands return a **valid NVIDIA driver version** and **both versions match**, proceed to **Step 3: Install CUDA**.
-   If they return an **error** or **show different versions**, proceed to **Step 2: Install NVIDIA Drivers**.

### **Step 2: Install NVIDIA Drivers**

1.  **Visit NVIDIA Driver Download Page**  
    Go to the official NVIDIA driver page:  
    [NVIDIA Driver Download](https://www.nvidia.com/en-us/drivers/unix/) 
2.  **Select the Driver**  
    Search for the best driver for your GPU, or use a stable version like **Latest New Feature Branch Version: 565.77**. Select your driver version and click **Download**. This will download a `.run` file (e.g., `NVIDIA-Linux-x86_64-565.77.run`).
3.  **Update and Upgrade**  
    Open a terminal and run the following commands to ensure your system is up to date and to remove any existing NVIDIA drivers:
   ```bash
   sudo apt update
sudo apt upgrade -y
   ```
   -   **sudo apt update**: Updates the list of available packages.
   -   **sudo apt upgrade**: Installs updates for installed packages.
   
   Then, remove any NVIDIA-related drivers or packages to avoid conflicts:
   ```bash
   sudo apt remove --purge '^nvidia-.*' -y
   ```
   -   This command removes all NVIDIA-related packages from your system, including drivers and associated files.
      
   Clean up any unnecessary packages:    
   ```bash
   sudo apt autoremove -y
sudo apt update
   ```
   -   Removes dependencies that are no longer needed.        
4.  **Install Build Tools**  
    Next, install the required build tools needed to compile the NVIDIA drivers:
   ```bash
   sudo apt install -y build-essential
   ```
   -  This installs essential packages for compiling software, including compilers and libraries.        
5.  **Switch to Multi-User Target**  
    Switch to a multi-user target mode, which is a non-graphical mode that helps avoid conflicts during the driver installation:
   ```bash
   sudo systemctl isolate multi-user.target
   ```    
   -   This command switches the system to a state where no graphical environment is running, which is recommended for installing the driver.        
6.  **Login with User Credentials**  
    Log in with your username and password.
7.  **Navigate to Downloads Directory**  
    Go to the directory where the `.run` file was downloaded.
   ```bash
   cd Downloads/
   ```    
8.  **Make the NVIDIA Installer Executable**  
    Grant execution permissions to the `.run` file.
   ```bash
   chmod +x NVIDIA-Linux-x86_64-565.77.run
   ```
   -   `chmod +x`: Makes the `.run` file executable.
9.  **Run the NVIDIA Installer**  
    Install the NVIDIA driver by running the `.run` file.
   ```bash
   sudo ./NVIDIA-Linux-x86_64-565.77.run
   ```
10.  **Follow the Prompts**
-   When prompted, select **NVIDIA proprietary** drivers.
-   Press **Yes**, **Ok** or **Continue Installation** when asked to proceed.
-   If asked about rebuilding **initramfs**, select **Rebuild Initramfs**.
-   Finally reboot the system to start new programs which use the NVIDIA GPU(s)
   ```bash
   sudo reboot
   ```
11.  **Verify Installation Again**  
    After completing the installation, verify that the NVIDIA drivers were installed correctly:
   ```bash
   nvidia-settings --version
cat /proc/driver/nvidia/version
nvidia-smi
   ```
-   If these commands return a valid **NVIDIA driver version** and both versions match, proceed to **Step 3: Install CUDA**.
-   If the commands return an error or the versions do not match, **repeat Step 2**, starting from the **Update and Upgrade** section.

### **Step 3: Install CUDA**

To install CUDA on Ubuntu 24.04, follow these steps:

1.  **Update the Package List**  
    Ensure your system package list is up to date.
   ```bash
   sudo apt update
   ```    
2.  **Download the CUDA Repository Pin**  
    This file helps prioritize the CUDA repository during package installation.
   ```bash
   wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-ubuntu2404.pin
   ```    
3.  **Move the Repository Pin**  
    Place the downloaded pin file into the appropriate directory to apply its settings.
   ```bash
   sudo mv cuda-ubuntu2404.pin /etc/apt/preferences.d/cuda-repository-pin-600
   ```    
4.  **Download the CUDA Repository Installer**  
    Download the latest available CUDA installer for Ubuntu 24.04. The version used here is **CUDA 12.8.1**.
   ```bash
   wget https://developer.download.nvidia.com/compute/cuda/12.8.1/local_installers/cuda-repo-ubuntu2404-12-8-local_12.8.1-570.124.06-1_amd64.deb
   ```    
5.  **Install the CUDA Repository**  
    Use `dpkg` to install the downloaded package, which sets up the CUDA repository on your system.
   ```bash
   sudo dpkg -i cuda-repo-ubuntu2404-12-8-local_12.8.1-570.124.06-1_amd64.deb
   ```    
6.  **Add the Repository Key**  
    Copy the repository's GPG key to ensure package authenticity and prevent security warnings.
   ```bash
   sudo cp /var/cuda-repo-ubuntu2404-12-8-local/cuda-*-keyring.gpg /usr/share/keyrings/
   ```
7.  **Update the Package List Again**  
    Refresh the package list to include the newly added CUDA repository.
   ```bash
   sudo apt-get update
   ```    
8.  **Install CUDA Toolkit**  
    Install the CUDA Toolkit, which includes the CUDA compiler, libraries, and tools needed for development.
   ```bash
   sudo apt-get -y install cuda-toolkit-12-8
   ```    
9.  **Install NVIDIA CUDA Toolkit**  
    This package provides additional CUDA-related tools and dependencies.
   ```bash
   sudo apt install nvidia-cuda-toolkit
   ```    
10.  **Verify CUDA Installation**  
    Run `nvcc --version` to confirm that CUDA has been installed correctly.
   ```bash
   nvcc --version
   ```
-   If the output displays the **NVIDIA CUDA compiler driver** version (e.g., **12.8.1**), the installation was successful. 
-   If the command returns an error, repeat the installation steps starting from the **Update the Package List** section.

### **Step 4: Install Docker**

To install Docker on Ubuntu 24.04, follow these steps:

1.  **Update and Upgrade Packages**  
    Ensure your system is up to date before installing Docker.
   ```bash
   sudo apt update && sudo apt upgrade -y
   ```    
2.  **Install Required Dependencies**  
    Install essential packages for HTTPS-based repositories and certificate management.
   ```bash
   sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
   ```    
3.  **Add Docker’s Official GPG Key**  
    Download and store Docker’s official signing key to verify package integrity.
   ```bash
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
   ```    
4.  **Add Docker Repository**  
    Configure the system to use Docker’s stable repository for installation.
   ```bash
   echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   ```    
5.  **Update the Package List**  
    Refresh the package list to include the newly added Docker repository.
   ```bash
   sudo apt update
   ```    
6.  **Install Docker Engine**  
    Install Docker Community Edition (CE) along with essential components.
   ```bash
   sudo apt install docker-ce docker-ce-cli containerd.io -y
   ```    
7.  **Verify Docker Installation**  
    Run `docker --version` to confirm that Docker has been installed correctly.
   ```bash
   sudo docker --version
   ```    
    -   If the output displays a valid Docker version (e.g., **28.0.1**), the installation was successful.      
    -   If the command returns an error, repeat the installation steps starting from **Update and Upgrade Packages**.
8.  **Add Current User to Docker Group**  
    Grant the current user permission to run Docker without `sudo`.
   ```bash
   sudo usermod -aG docker $USER
   ```    
9.  **Check Docker Service Status**  
    Verify that Docker is running and active.
   ```bash
   sudo systemctl status docker
   ```    
-   If Docker is **active (running)**, proceed to the next step.
-   If the service is inactive or shows errors, restart Docker using the steps above or refer to the **Commands to Run Docker** section in the annex.
-   If Docker is still inactive or returns an error, consider reinstalling Docker from **Step 1**.
10.  **Verify Docker Installation**  
    Runs a test container to check if Docker is working properly.
   ```bash
   sudo docker run hello-world
   ```        
11.  **List Installed Docker Images**  
    Displays the list of available Docker images.
   ```bash
   sudo docker images
   ```        
12.  **Pull NVIDIA CUDA Image**  
    Downloads the **NVIDIA CUDA 11.8.0 with cuDNN 8** image for Ubuntu 22.04.
   ```bash
   sudo docker pull nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
   ```        
13.  **Verify CUDA Image Installation**  
    Lists all downloaded images to confirm that the CUDA image is available.
   ```bash
   sudo docker images
   ```    
-   If `nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04` appears in the list, the installation was successful.  
-   If the image is missing, repeat the **Pull NVIDIA CUDA Image** step.
  
If the image is listed, you can continue with the next step of the installation: **Setting Up the Docker Container**.

### **Step 5: Setting Up the Docker Container**

To configure the Docker container with NVIDIA support, follow these steps:

The first step in setting up the Docker container is installing the **NVIDIA Container Toolkit**, which enables GPU support for containers.

1.  **Update and Upgrade Packages**  
    Ensure the system is updated to prevent conflicts during installation.
   ```bash
   sudo apt update
   ```        
2.  **Add NVIDIA Repository for Container Toolkit**  
    Add the official NVIDIA repository to install the necessary container tools.
   ```bash
   curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
  sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
  sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
   ```        
3.  **Update the Package List**  
    Refresh the package list to include the newly added NVIDIA repository.
   ```bash
   sudo apt-get update
   ```          
4.  **Install NVIDIA Container Toolkit**  
    Install the required toolkit to enable GPU support in Docker containers.
   ```bash
   sudo apt-get install -y nvidia-container-toolkit
   ```    
5.  **Configure NVIDIA Runtime for Containerd**  
    Set up the NVIDIA runtime to work with **containerd**, ensuring GPU acceleration in containers.
   ```bash
   sudo nvidia-ctk runtime configure --runtime=docker
   ```    
6.  **Restart Docker**  
    Apply the changes by restarting the Docker service.
   ```bash
   sudo systemctl restart docker
   ```    
7.  **Install NVIDIA Docker Support**  
Install **nvidia-docker2**, which integrates the NVIDIA runtime into Docker.
   ```bash
   sudo apt-get install -y nvidia-docker2
   ```
If you're not familiar with the main Docker commands, please refer to the **Docker Usage Commands** section in the annex for a detailed guide on how to use Docker effectively.
8.  **Run the Container with NVIDIA GPU Support**  
    After installing **nvidia-docker2**, you can run the container with GPU support using the command:  
   ```bash
   sudo docker run --cpus=8 --memory=11g --memory-swap=17g --shm-size=6g --runtime=nvidia --gpus all -it --rm nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
   ```	
   -   `--cpus=8` → Limits the container to use only 8 CPU cores.    
	-   `--memory=11g` → Allocates 11GB of RAM to the container.	    
	-   `--memory-swap=17g` → Sets the total memory limit (RAM + Swap) to 17GB.    
	-   `--shm-size=6g` → Increases the shared memory allocation to 6GB, useful for PyTorch and other memory-intensive processes.    
	-   `--runtime=nvidia --gpus all` → Ensures the container has access to the GPU for accelerated computation.
9.  **Install Miniconda**  
    If conda is not installed within the container, follow these steps to install it:   
-   First, check the version of conda:
	   ```bash
	   conda --version
	   ```   
       If the command is not found, proceed with the installation.        
-   Update and install necessary packages:
	   ```bash
	   apt update && apt install wget -y
	   apt upgrade -y
	   ```
-   Download and install Miniconda:
	   ```bash
	   wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
	   bash Miniconda3-latest-Linux-x86_64.sh
	   
	   ```      
       Follow the on-screen instructions and press ENTER. Type **yes** when prompted to proceed with the installation.    
-   After installation, source the bashrc to refresh the shell environment:
	   ```bash
	   source ~/.bashrc
	   ```
-   Finally, verify that conda is properly installed:
	   ```bash
	   conda --version
	   ```
       You should see the version number of conda (e.g., `conda 25.1.1`).
It is recommended to make a commit after each step from here on out. This will allow you to save the changes made without committing to the container. The steps to do this include: listing the containers, obtaining the container ID, making a commit, and removing the oldest image. These commands are detailed in the **Docker Usage Commands** section in the annex.
10.   **Create and Activate the Conda Environment**  
  -   Create a new Conda environment called `nerfstudio` with Python 3.8 
	   ```bash
	   conda create --name nerfstudio -y python=3.8
	   ```      
  -   Activate the environment
	   ```bash
	   conda activate nerfstudio
	   ```              
11.   **Install Specific Versions of PyTorch and torchvision**
   -   Upgrade pip to the latest version within the `nerfstudio` environment
	   ```bash
	   python -m pip install --upgrade pip
	   ```        
   -   Uninstall existing versions of `torch`, `torchvision`, `functorch`, and `tinycudann`
	   ```bash
	   pip uninstall torch torchvision functorch tinycudann
	   ```              
   -   Install the required versions of PyTorch and torchvision compatible with CUDA 11.8:
	   ```bash
	   pip install torch==2.1.2+cu118 torchvision==0.16.2+cu118 --extra-index-url https://download.pytorch.org/whl/cu118
	   ```              
   -   Verify CUDA availability with PyTorch
	   ```bash
	   python -c "import torch; print(torch.cuda.is_available())"
	   ```              
12.   **Install CUDA Toolkit**   
   -   Install the CUDA Toolkit version 11.8.0 from the NVIDIA channel using Conda
	   ```bash
	   conda install -c "nvidia/label/cuda-11.8.0" cuda-toolkit -y
	   ```              
   -   Verify that the correct CUDA toolkit is installed
	   ```bash
	   conda list | grep cuda
	   ```      
13.  **Install Ninja**  
    Install `ninja`, a small build system, which is required for building certain dependencies  
   ```bash
   pip install ninja
   ```
14.  **Install Tiny CUDA NN** 
-   Update the package list and install `git`  
	   ```bash
	   apt-get update
	   apt-get install git -y
	   ```       
-   Install the `tiny-cuda-nn` library from GitHub using `pip`  
	   ```bash
	   pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch
	   ```      
-   Verify the installation of `tiny-cuda-nn`:  
	   ```bash
	   python -c "import tinycudann; print('tiny-cuda-nn is installed')"
	   ```
15.  **Install Pixi**
-   Update the package list 
	   ```bash
	   apt update
	   ```
-   Install `curl`  
	   ```bash
	   apt install curl -y
	   ```
-   Download and run the Pixi installer
	   ```bash
	   curl -fsSL https://pixi.sh/install.sh | bash
	   ```
-   Source the bashrc to refresh the shell environment
	   ```bash
	   source ~/.bashrc
	   ```
-   Verify the Pixi version
	   ```bash
	   pixi --version
	   ```
16.  **Clone Nerfstudio Repository**    
-   Clone the `nerfstudio` repository from GitHub  
	   ```bash
	   git clone https://github.com/nerfstudio-project/nerfstudio.git
	   ``` 
-   Navigate into the `nerfstudio` directory 
	   ```bash
	   cd nerfstudio
	   ```    
17.  **Run Post-Install Script and Start Pixi**    
-   Run the post-install script for Nerfstudio 
	   ```bash
	   pixi run post-install
	   ``` 
-   Start the Pixi shell  
	   ```bash
	   pixi shell
	   ```
18.  **Run Nerfstudio Example**    
-   Update the package list 
	   ```bash
	   apt update
	   ```
-   Install the `libgl1-mesa-glx` package, which is required for rendering
	   ```bash
	   apt install libgl1-mesa-glx -y
	   ```
-   Execute the `train-example-nerf` to verify if everything is working correctly
	   ```bash
	   pixi run train-example-nerf
	   ```
-  Use ns-viewer to load the configuration and visualize the output of the training. Check the filename in outputs/dozer/nerfacto.
   ```bash
   ns-viewer --load-config outputs/dozer/nerfacto/2025-03-10_141612/config.yml
   ```        
- Once the viewer is running, open a web browser and enter the following URL:**  	   	   	   
   ```bash
   http://0.0.0.0:7007
   ```           
-  **Important:** Replace `0.0.0.0` with the actual IP address of your container. You can find it using:  	   
   ```bash
   docker inspect container_id | grep "IPAddress"
   ```        
19.  **Install and Verify GSplat**    
-   Install `gsplat` using `pip` 
	   ```bash
	   pip install gsplat
	   ```
-   Install the latest version of `gsplat` directly from GitHub
	   ```bash
	   pip install git+https://github.com/nerfstudio-project/gsplat
	   ```
-   Check if `gsplat` is installed correctly  
	   ```bash
	   python -c "import gsplat; print('gsplat installed successfully')"
	   ```
20.  **Copy Video File to Container**
-   **Note:** `pista.mp4` is a test video. You can download it from the following link:  
    **[https://drive.google.com/file/d/1JQCOZGtHDf9HyXCcjiQpW29SAT-4_9O4/view?usp=sharing]**
-   Replace it with the actual path to your test video (e.g., `path/to/your/test/video`).
-   Copy the video file to the container using the `docker cp` command. Replace `container_id` with your container's ID:
	   ```bash
	   sudo docker cp /home/genaro-rivero/Downloads/pista.MP4 container_id:/root/nerfstudio
	   ```
21.  **Process Video Data**
-   Run the `ns-process-data` command to process the video file. Replace `./pista.MP4` with the correct path inside the container
	   ```bash
	   ns-process-data video --data ./pista.MP4 --sfm-tool hloc --output-dir ./processed
	   ```
22.  **Train Model with Processed Data**
**Note:** If you previously installed Ubuntu and encounter memory-related issues at this step, refer to the **Annex: Memory Usage Issues** for troubleshooting.
-   Start training the model using the processed data. Adjust the command as needed 
	   ```bash
	   ns-train splatfacto --pipeline.model.cull_alpha_thresh=0.005 --pipeline.model.stop-screen-size-at=15000 --pipeline.model.use_scale_regularization=True --data ./processed
	   ```   
 23.  **View the Training Output**
-   Use `ns-viewer` to visualize the results of the training. Check the filename in outputs/processed/splatfacto.
	   ```bash
	   ns-viewer --load-config outputs/processed/splatfacto/2025-03-11_210124/config.yml`
	   ```   
- Once the viewer is running, open a web browser and enter the following URL:**  	   	   	   
   ```bash
   http://0.0.0.0:7007
   ```           
-  **Important:** Replace `0.0.0.0` with the actual IP address of your container. You can find it using:  	   
   ```bash
   docker inspect container_id | grep "IPAddress"
   ```        


## **Annex**
### **Commands to Run Docker**

1.  **Stop Docker**  
    This command stops the Docker service.
   ```bash
   sudo systemctl stop docker
   ```    
2. **Start Docker**  
    This command starts the Docker service again.
  ```bash
  sudo systemctl start docker
  ```    
3.  **Restart Docker**  
    This command restarts Docker in a single step.
   ```bash
   sudo systemctl restart docker
   ```    
4.  **Check Docker Status Again**  
    Ensure that Docker is now **active (running)**.
   ```bash
   sudo systemctl status docker
   ```   
    
### Docker Usage Commands

1.  **List Docker Images**  
    This command allows you to view all available images on your system.
   ```bash
   sudo docker images
   ```       
2.  **List Running Containers**  
    This command shows the containers that are currently running. You can also view all containers, including stopped ones.
   ```bash
   sudo docker ps -a
   ```       
3.  **Remove a Container**  
    To remove a stopped container, this command can be used. Additionally, there’s a command to remove all stopped containers at once.
   ```bash
   sudo docker rm $(sudo docker ps -a -q)
   ```       
4.  **Remove an Image**  
    This command allows you to remove a Docker image from your system.
   ```bash
   sudo docker rmi <image_id>
   ```       
5.  **Commit Changes from a Container to a New Image**  
    If you’ve made changes to a container and want to save those changes as a new image, this command will help you do that.
   ```bash
   sudo docker commit <container_id> <new_image_name>:<tag>
   ```       
6.  **Run a Container with GPU Support**  
    If your system is configured to use NVIDIA GPUs, you can run a container with GPU support, allowing you to take advantage of GPU acceleration in your applications
   ```bash
   sudo docker run --rm --gpus all <image_name> <command>
   ```   
   
### **Memory Usage Issues**

If the training process is not progressing or your laptop becomes unresponsive (e.g., the cursor stops moving), it is likely due to the high memory requirements of the training. This can happen when:
-   **Insufficient RAM** is available    
-   **Low Swap Memory Allocation** during the installation process.
-   **Shared Memory (shm) is too small**, limiting the container's available memory.
To prevent these issues, allocate a sufficient amount of memory when running the container.
----------
#### **Assigning More Memory to the Container**

If your system struggles with training, try running the container with a specific amount of CPU and memory allocation.
   ```bash
   sudo docker run --cpus=8 --memory=11g --memory-swap=17g --shm-size=6g --runtime=nvidia --gpus all -it --rm nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
   ```   
- **Explanation of Each Parameter:**

	-   `--cpus=8` → Limits the container to use only 8 CPU cores.    
	-   `--memory=11g` → Allocates 11GB of RAM to the container.	    
	-   `--memory-swap=17g` → Sets the total memory limit (RAM + Swap) to 17GB.    
	-   `--shm-size=6g` → Increases the shared memory allocation to 6GB, useful for PyTorch and other memory-intensive processes.    
	-   `--runtime=nvidia --gpus all` → Ensures the container has access to the GPU for accelerated computation.
If reducing the assigned memory does not resolve the issue and the system still becomes unresponsive (e.g., the cursor stops moving), proceed to the next section.

----------

#### **Checking System Memory and CPU Usage**

Before adjusting additional settings, check the current memory and CPU availability with the following steps:

-   Check available RAM and swap memory. This will show the total, used, and available RAM and swap memory in a human-readable format.
   ```bash
   `free -h
   ```       
-   Check shared memory (shm) allocation. If the size is too low, you may need to increase it.
   ```bash
   df -h | grep shm
   ```       
-   Check the number of available CPU cores. The number of processor cores available can affect training performance.
   ```bash
   nproc
   ```       
-   Monitor memory usage in real time. Continuously updating the memory status can help track usage during training.
   ```bash
   watch -n 1 free -h
   ```       
----------
#### **Optimizing PyTorch and Gsplat Performance**

If the problem persists, modify PyTorch and Gsplat settings to optimize memory usage.

1.  **Increase matrix multiplication precision**  
    Navigate to the PyTorch compiler directory 
   ```bash
   cd .pixi/envs/default/lib/python3.10/site-packages/torch/_inductor/
   ```       
Edit the file `compile_fx.py`. 
   ```bash
   nano compile_fx.py
   ```       
Inside the file, add a line to optimize matrix multiplications by increasing precision.
   ```python
   import torch
torch.set_float32_matmul_precision('high')
   ```           
2.  **Modify gsplat backend settings**  
    Navigate to the gsplat CUDA backend directory 
   ```bash
   cd .pixi/envs/default/lib/python3.10/site-packages/gsplat/cuda/
   ```       
Edit `_backend.py`. 
   ```bash
   nano _backend.py
   ```       
Modify the script to adjust job allocation, limiting the number of parallel jobs to prevent excessive memory usage.
   ```python
   PATH = os.path.dirname(os.path.abspath(__file__))
NO_FAST_MATH = os.getenv("NO_FAST_MATH", "0") == "1"
MAX_JOBS = os.getenv("MAX_JOBS")
need_to_unset_max_jobs = False
if not MAX_JOBS:
    need_to_unset_max_jobs = True
    os.environ["MAX_JOBS"] = "5"
   ```       
By following these steps, you can improve system stability and allow the training process to complete successfully.

